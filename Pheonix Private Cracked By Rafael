local library =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/rafael25ic-blip/phoenix-cracked/refs/heads/main/Pheonix%20Private%20Librerya", true))()
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local window =
    library:AddWindow(
    "Pheonix Private Cracked By Rafael",
    {
        main_color = Color3.fromRGB(255, 0, 0),
        min_size = Vector2.new(700, 650),
        can_resize = false
    }
)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local changeSpeedSizeRemote = game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote")
local VirtualUser = game:GetService("VirtualUser")
local muscleEvent = Player:WaitForChild("muscleEvent")
local antiAFKConnection

local function setupAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end

    antiAFKConnection =
        Player.Idled:Connect(
        function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    )
end
setupAntiAFK()

local function removePortals()
    for _, portal in pairs(game:GetDescendants()) do
        if portal.Name == "RobloxForwardPortals" then
            portal:Destroy()
        end
    end
    if _G.AdRemovalConnection then
        _G.AdRemovalConnection:Disconnect()
    end

    _G.AdRemovalConnection =
        game.DescendantAdded:Connect(
        function(descendant)
            if descendant.Name == "RobloxForwardPortals" then
                descendant:Destroy()
            end
        end
    )
end
removePortals()

local blockedFrames = {
    "strengthFrame",
    "agilityFrame",
}

for _, name in ipairs(blockedFrames) do
    local frame = ReplicatedStorage:FindFirstChild(name)
    if frame and frame:IsA("GuiObject") then
        frame.Visible = false
    end
end

ReplicatedStorage.ChildAdded:Connect(
    function(child)
        if table.find(blockedFrames, child.Name) and child:IsA("GuiObject") then
            child.Visible = false
        end
    end
)

local MainTab = window:AddTab("Main")
local KillingTab = window:AddTab("Killing")
local SpecsTab = window:AddTab("Specs")
local FarmingTab = window:AddTab("Farming")
local InventoryTab = window:AddTab("Inventory")
local PetsTab = window:AddTab("Pet Shop")
local TeleportTab = window:AddTab("Teleports")
local StatsTab = window:AddTab("Stats")
KillingTab:Show()

MainTab:AddLabel("Important:").TextSize = 22

local antiKnockbackSwitch =
    MainTab:AddSwitch(
    "Anti Fling",
    function(bool)
        if bool then
            local playerName = game.Players.LocalPlayer.Name
            local character = game.Workspace:FindFirstChild(playerName)
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                    bodyVelocity.P = 1250
                    bodyVelocity.Parent = rootPart
                end
            end
        else
            local playerName = game.Players.LocalPlayer.Name
            local character = game.Workspace:FindFirstChild(playerName)
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
                    if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
                        existingVelocity:Destroy()
                    end
                end
            end
        end
    end
)
antiKnockbackSwitch:Set(true)

local lockRunning = false
local lockThread = nil

local lockSwitch =
    MainTab:AddSwitch(
    "Lock Position",
    function(state)
        lockRunning = state
        if lockRunning then
            local player = game.Players.LocalPlayer
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            local lockPosition = hrp.Position

            lockThread =
                coroutine.create(
                function()
                    while lockRunning do
                        hrp.Velocity = Vector3.new(0, 0, 0)
                        hrp.RotVelocity = Vector3.new(0, 0, 0)
                        hrp.CFrame = CFrame.new(lockPosition)
                        wait(0.05)
                    end
                end
            )

            coroutine.resume(lockThread)
        end
    end
)
lockSwitch:Set(false)

local showpetsswitch =
    MainTab:AddSwitch(
    "Show Pets",
    function(bool)
        local player = game:GetService("Players").LocalPlayer
        if player:FindFirstChild("hidePets") then
            player.hidePets.Value = bool
        end
    end
)
showpetsswitch:Set(false)

local showotherpetsswitch =
    MainTab:AddSwitch(
    "Show Other Pets",
    function(bool)
        local player = game:GetService("Players").LocalPlayer
        if player:FindFirstChild("showOtherPetsOn") then
            player.showOtherPetsOn.Value = bool
        end
    end
)
showotherpetsswitch:Set(false)

MainTab:AddLabel("Misc:").TextSize = 22

MainTab:AddSwitch(
    "Infinite Jump",
    function(bool)
        _G.InfiniteJump = bool

        if bool then
            local InfiniteJumpConnection
            InfiniteJumpConnection =
                game:GetService("UserInputService").JumpRequest:Connect(
                function()
                    if _G.InfiniteJump then
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(
                            "Jumping"
                        )
                    else
                        InfiniteJumpConnection:Disconnect()
                    end
                end
            )
        end
    end
)

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)

local function createAllParts()
    local numberOfParts = math.ceil(totalDistance / partSize)

    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local function createPart(pos, name)
                local part = Instance.new("Part")
                part.Size = Vector3.new(partSize, 1, partSize)
                part.Position = pos
                part.Anchored = true
                part.Transparency = 1
                part.CanCollide = true
                part.Name = name
                part.Parent = workspace
                return part
            end

            table.insert(
                parts,
                createPart(startPosition + Vector3.new(x * partSize, 0, z * partSize), "Part_Side_" .. x .. "_" .. z)
            )
            table.insert(
                parts,
                createPart(
                    startPosition + Vector3.new(-x * partSize, 0, z * partSize),
                    "Part_LeftRight_" .. x .. "_" .. z
                )
            )
            table.insert(
                parts,
                createPart(
                    startPosition + Vector3.new(-x * partSize, 0, -z * partSize),
                    "Part_UpLeft_" .. x .. "_" .. z
                )
            )
            table.insert(
                parts,
                createPart(
                    startPosition + Vector3.new(x * partSize, 0, -z * partSize),
                    "Part_UpRight_" .. x .. "_" .. z
                )
            )
        end
    end
end
task.spawn(createAllParts)

local walkonwaterSwicth =
    MainTab:AddSwitch(
    "Walk on Water",
    function(bool)
        for _, part in ipairs(parts) do
            if part and part.Parent then
                part.CanCollide = bool
            end
        end
    end
)
walkonwaterSwicth:Set(true)

local spinwheelSwitch =
    MainTab:AddSwitch(
    "Spin Fortune Wheel",
    function(bool)
        _G.AutoSpinWheel = bool

        if bool then
            spawn(
                function()
                    while _G.AutoSpinWheel and wait(1) do
                        game:GetService("ReplicatedStorage").rEvents.openFortuneWheelRemote:InvokeServer(
                            "openFortuneWheel",
                            game:GetService("ReplicatedStorage").fortuneWheelChances["Fortune Wheel"]
                        )
                    end
                end
            )
        end
    end
)

local timeDropdown =
    MainTab:AddDropdown(
    "Change Time",
    function(selection)
        local lighting = game:GetService("Lighting")

        if selection == "Night" then
            lighting.ClockTime = 0
        elseif selection == "Day" then
            lighting.ClockTime = 12
        elseif selection == "Midnight" then
            lighting.ClockTime = 6
        end
    end
)

timeDropdown:Add("Night")
timeDropdown:Add("Day")
timeDropdown:Add("Midnight")

SpecsTab:AddLabel("Player Stats:").TextSize = 24

local playerToInspect = nil

local emojiMap = {
    ["Time"] = utf8.char(0x1F55B),
    ["Stats"] = utf8.char(0x1F4CA),
    ["Strength"] = utf8.char(0x1F4AA),
    ["Rebirths"] = utf8.char(0x1F504),
    ["Durability"] = utf8.char(0x1F6E1),
    ["Kills"] = utf8.char(0x1F480),
    ["Agility"] = utf8.char(0x1F3C3),
    ["Evil Karma"] = utf8.char(0x1F608),
    ["Good Karma"] = utf8.char(0x1F607),
    ["Brawls"] = utf8.char(0x1F94A)
}

local statDefinitions = {
    {name = "Strength", statName = "Strength"},
    {name = "Rebirths", statName = "Rebirths"},
    {name = "Durability", statName = "Durability"},
    {name = "Agility", statName = "Agility"},
    {name = "Kills", statName = "Kills"},
    {name = "Evil Karma", statName = "evilKarma"},
    {name = "Good Karma", statName = "goodKarma"},
    {name = "Brawls", statName = "Brawls"}
}

local function getCurrentPlayers()
    local playersList = {}
    for _, p in ipairs(Players:GetPlayers()) do
        table.insert(playersList, p)
    end
    return playersList
end

local specdropdown =
    SpecsTab:AddDropdown(
    "Choose Player",
    function(text)
        for _, player in ipairs(getCurrentPlayers()) do
            local optionText = player.DisplayName .. " | " .. player.Name
            if text == optionText then
                playerToInspect = player
                updateStatLabels(playerToInspect)
                break
            end
        end
    end
)

for _, player in ipairs(getCurrentPlayers()) do
    specdropdown:Add(player.DisplayName .. " | " .. player.Name)
end

Players.PlayerAdded:Connect(
    function(player)
        specdropdown:Add(player.DisplayName .. " | " .. player.Name)
    end
)

Players.PlayerRemoving:Connect(
    function(player)
        specdropdown:Clear()
        for _, p in ipairs(getCurrentPlayers()) do
            specdropdown:Add(p.DisplayName .. " | " .. p.Name)
        end
    end
)

local playerNameLabel = SpecsTab:AddLabel("Name: N/A")
playerNameLabel.TextSize = 20

local playerUsernameLabel = SpecsTab:AddLabel("Username: N/A")
playerUsernameLabel.TextSize = 20

local statLabels = {}
for _, info in ipairs(statDefinitions) do
    statLabels[info.name] = SpecsTab:AddLabel(emojiMap[info.name] .. " " .. info.name .. ": 0 (0)")
    statLabels[info.name].TextSize = 20
end

local function formatNumber(n)
    if n >= 1e15 then
        return string.format("%.1fqa", n / 1e15)
    elseif n >= 1e12 then
        return string.format("%.1ft", n / 1e12)
    elseif n >= 1e9 then
        return string.format("%.1fb", n / 1e9)
    elseif n >= 1e6 then
        return string.format("%.1fm", n / 1e6)
    elseif n >= 1e3 then
        return string.format("%.1fk", n / 1e3)
    else
        return tostring(n)
    end
end

local function formatWithCommas(n)
    local formatted = tostring(n)
    while true do
        formatted, k = formatted:gsub("^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then
            break
        end
    end
    return formatted
end

local function updateStatLabels(targetPlayer)
    if not targetPlayer then
        return
    end

    playerNameLabel.Text = "Name: " .. targetPlayer.DisplayName
    playerUsernameLabel.Text = "Username: " .. targetPlayer.Name

    local leaderstats = targetPlayer:FindFirstChild("leaderstats")
    if not leaderstats then
        return
    end

    for _, info in ipairs(statDefinitions) do
        local statObject

        if leaderstats:FindFirstChild(info.statName) then
            statObject = leaderstats:FindFirstChild(info.statName)
        elseif targetPlayer:FindFirstChild(info.statName) then
            statObject = targetPlayer:FindFirstChild(info.statName)
        end

        if statObject then
            local value = statObject.Value
            local emoji = emojiMap[info.name] or ""
            statLabels[info.name].Text =
                string.format("%s %s: %s (%s)", emoji, info.name, formatNumber(value), formatWithCommas(value))
        else
            statLabels[info.name].Text = emojiMap[info.name] .. " " .. info.name .. ": 0 (0)"
        end
    end
end

task.spawn(
    function()
        while true do
            if playerToInspect then
                updateStatLabels(playerToInspect)
            end
            task.wait(0.2)
        end
    end
)

SpecsTab:AddLabel("ââââââââââââââââââââââââââââ")

SpecsTab:AddLabel("Advanced Stats:").TextSize = 24

local enemyHealthLabel = SpecsTab:AddLabel("Enemy Health: N/A")
enemyHealthLabel.TextSize = 20
enemyHealthLabel.TextColor3 = Color3.fromRGB(0, 140, 255)

local playerDamageLabel = SpecsTab:AddLabel("Your Damage: N/A")
playerDamageLabel.TextSize = 20
playerDamageLabel.TextColor3 = Color3.fromRGB(255, 0, 0)

local hitsToKillLabel = SpecsTab:AddLabel("Hits to Kill: N/A")
hitsToKillLabel.TextSize = 20
hitsToKillLabel.TextColor3 = Color3.fromRGB(255, 0, 0)

local function calculateEnemyHealth(targetPlayer)
    if not targetPlayer then
        return 0
    end
    local baseDura = 0
    local durabilityStat =
        targetPlayer:FindFirstChild("Durability") or
        (targetPlayer:FindFirstChild("leaderstats") and targetPlayer.leaderstats:FindFirstChild("Durability"))
    if durabilityStat then
        baseDura = durabilityStat.Value
    end

    local totalMultiplier = 1

    local ultFolder = targetPlayer:FindFirstChild("ultimatesFolder")
    if ultFolder then
        local infernalHealth = ultFolder:FindFirstChild("Infernal Health")
        if infernalHealth then
            local upgrades = infernalHealth.Value or 0
            totalMultiplier = totalMultiplier + 0.15 * upgrades
        end
    end

    local backpack = targetPlayer:FindFirstChild("Backpack")
    if backpack then
        local equippedPets = backpack:FindFirstChild("EquippedPets") or backpack:FindFirstChild("equippedPets")
        if equippedPets then
            for _, pet in ipairs(equippedPets:GetChildren()) do
                if string.lower(tostring(pet)):match("mighty") and string.lower(tostring(pet)):match("monster") then
                    totalMultiplier = totalMultiplier + 0.5
                    break
                end
            end
        end
    end

    local totalHealth = baseDura * totalMultiplier
    return totalHealth
end

local function calculateLocalPlayerDamage()
    local strengthStat = nil
    local leaderstats = Player:FindFirstChild("leaderstats")
    if leaderstats then
        strengthStat = leaderstats:FindFirstChild("Strength")
    end
    if not strengthStat then
        return 0
    end

    local baseDamage = strengthStat.Value * 0.0667
    local totalMultiplier = 1

    -- Ultimates Check
    local ultFolder = Player:FindFirstChild("ultimatesFolder")
    if ultFolder then
        local demonDamage = ultFolder:FindFirstChild("Demon Damage")
        if demonDamage then
            local upgrades = demonDamage.Value or 0
            totalMultiplier = totalMultiplier + math.min(0.1 * upgrades, 0.5)
        end
    end

    local backpack = Player:FindFirstChild("Backpack")
    if backpack then
        local equippedPets = backpack:FindFirstChild("EquippedPets") or backpack:FindFirstChild("equippedPets")
        if equippedPets then
            for _, pet in ipairs(equippedPets:GetChildren()) do
                if string.lower(tostring(pet)):match("wild") and string.lower(tostring(pet)):match("wizard") then
                    totalMultiplier = totalMultiplier + 0.5
                    break
                end
            end
        end
    end

    baseDamage = baseDamage * totalMultiplier
    return baseDamage
end

local function calculateHitsToKill(health, damage)
    if damage <= 0 then
        return "â"
    end
    local hits = math.ceil(health / damage)
    if hits > 50 then
        return "â"
    elseif hits < 1 then
        return 1
    else
        return hits
    end
end

local function updateAdvancedStats(targetPlayer)
    if not targetPlayer then
        enemyHealthLabel.Text = "Enemy Health: N/A"
        playerDamageLabel.Text = "Your Damage: N/A"
        hitsToKillLabel.Text = "Hits to Kill: N/A"
        return
    end
    local enemyHealth = calculateEnemyHealth(targetPlayer)
    local playerDamage = calculateLocalPlayerDamage()
    local hitsToKill = calculateHitsToKill(enemyHealth, playerDamage)
    enemyHealthLabel.Text =
        string.format("Enemy Health: %s (%s)", formatNumber(enemyHealth), formatWithCommas(enemyHealth))
    playerDamageLabel.Text =
        string.format("Your Damage: %s (%s)", formatNumber(playerDamage), formatWithCommas(playerDamage))
    hitsToKillLabel.Text = string.format("Hits to Kill: %s", tostring(hitsToKill))
end

task.spawn(
    function()
        while true do
            if playerToInspect then
                updateAdvancedStats(playerToInspect)
            else
                updateAdvancedStats(nil)
            end
            task.wait(0.1)
        end
    end
)

local function checkCharacter()
    if not game.Players.LocalPlayer.Character then
        repeat
            task.wait()
        until game.Players.LocalPlayer.Character
    end
    return game.Players.LocalPlayer.Character
end

local function gettool()
    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game.Players.LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local function isPlayerAlive(player)
    return player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and
        player.Character:FindFirstChild("Humanoid") and
        player.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then
        return
    end
    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        pcall(
            function()
                firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
                firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
                gettool()
            end
        )
    end
end

KillingTab:AddLabel("Misc:").TextSize = 22

local dropdown =
    KillingTab:AddDropdown(
    "Select Pet",
    function(text)
        local petsFolder = game.Players.LocalPlayer.petsFolder
        for _, folder in pairs(petsFolder:GetChildren()) do
            if folder:IsA("Folder") then
                for _, pet in pairs(folder:GetChildren()) do
                    game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", pet)
                end
            end
        end
        task.wait(0.2)

        local petName = text
        local petsToEquip = {}

        for _, pet in pairs(game.Players.LocalPlayer.petsFolder.Unique:GetChildren()) do
            if pet.Name == petName then
                table.insert(petsToEquip, pet)
            end
        end

        for i = 1, math.min(8, #petsToEquip) do
            game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
            task.wait(0.1)
        end
    end
)
dropdown:Add("Wild Wizard")
dropdown:Add("Mighty Monster")

local switch =
    KillingTab:AddSwitch(
    "Remove Attack Animations",
    function(bool)
        if bool then
            local blockedAnimations = {
                ["rbxassetid://3638729053"] = true,
                ["rbxassetid://3638767427"] = true
            }

            local function setupAnimationBlocking()
                local char = game.Players.LocalPlayer.Character
                if not char or not char:FindFirstChild("Humanoid") then
                    return
                end

                local humanoid = char:FindFirstChild("Humanoid")

                for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                    if track.Animation then
                        local animId = track.Animation.AnimationId
                        local animName = track.Name:lower()

                        if
                            blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or
                                animName:match("right")
                         then
                            track:Stop()
                        end
                    end
                end

                _G.AnimBlockConnection =
                    humanoid.AnimationPlayed:Connect(
                    function(track)
                        if track.Animation then
                            local animId = track.Animation.AnimationId
                            local animName = track.Name:lower()

                            if
                                blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or
                                    animName:match("right")
                             then
                                track:Stop()
                            end
                        end
                    end
                )
            end

            local function processTool(tool)
                if tool and (tool.Name == "Punch" or tool.Name:match("Attack") or tool.Name:match("Right")) then
                    if not tool:GetAttribute("ActivatedOverride") then
                        tool:SetAttribute("ActivatedOverride", true)

                        _G.ToolConnections = _G.ToolConnections or {}
                        _G.ToolConnections[tool] =
                            tool.Activated:Connect(
                            function()
                                task.wait(0.05)
                                local char = game.Players.LocalPlayer.Character
                                if char and char:FindFirstChild("Humanoid") then
                                    for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                                        if track.Animation then
                                            local animId = track.Animation.AnimationId
                                            local animName = track.Name:lower()

                                            if
                                                blockedAnimations[animId] or animName:match("punch") or
                                                    animName:match("attack") or
                                                    animName:match("right")
                                             then
                                                track:Stop()
                                            end
                                        end
                                    end
                                end
                            end
                        )
                    end
                end
            end

            local function overrideToolActivation()
                for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    processTool(tool)
                end

                local char = game.Players.LocalPlayer.Character
                if char then
                    for _, tool in pairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            processTool(tool)
                        end
                    end
                end

                _G.BackpackAddedConnection =
                    game.Players.LocalPlayer.Backpack.ChildAdded:Connect(
                    function(child)
                        if child:IsA("Tool") then
                            task.wait(0.1)
                            processTool(child)
                        end
                    end
                )

                if char then
                    _G.CharacterToolAddedConnection =
                        char.ChildAdded:Connect(
                        function(child)
                            if child:IsA("Tool") then
                                task.wait(0.1)
                                processTool(child)
                            end
                        end
                    )
                end
            end

            _G.AnimMonitorConnection =
                game:GetService("RunService").Heartbeat:Connect(
                function()
                    if tick() % 0.5 < 0.01 then
                        local char = game.Players.LocalPlayer.Character
                        if char and char:FindFirstChild("Humanoid") then
                            for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                                if track.Animation then
                                    local animId = track.Animation.AnimationId
                                    local animName = track.Name:lower()

                                    if
                                        blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or
                                            animName:match("right")
                                     then
                                        track:Stop()
                                    end
                                end
                            end
                        end
                    end
                end
            )

            _G.CharacterAddedConnection =
                game.Players.LocalPlayer.CharacterAdded:Connect(
                function(newChar)
                    task.wait(1)
                    setupAnimationBlocking()
                    overrideToolActivation()

                    if _G.CharacterToolAddedConnection then
                        _G.CharacterToolAddedConnection:Disconnect()
                    end

                    _G.CharacterToolAddedConnection =
                        newChar.ChildAdded:Connect(
                        function(child)
                            if child:IsA("Tool") then
                                task.wait(0.1)
                                processTool(child)
                            end
                        end
                    )
                end
            )

            setupAnimationBlocking()
            overrideToolActivation()
        else
            if _G.AnimBlockConnection then
                _G.AnimBlockConnection:Disconnect()
                _G.AnimBlockConnection = nil
            end

            if _G.AnimMonitorConnection then
                _G.AnimMonitorConnection:Disconnect()
                _G.AnimMonitorConnection = nil
            end

            if _G.CharacterAddedConnection then
                _G.CharacterAddedConnection:Disconnect()
                _G.CharacterAddedConnection = nil
            end

            if _G.BackpackAddedConnection then
                _G.BackpackAddedConnection:Disconnect()
                _G.BackpackAddedConnection = nil
            end

            if _G.CharacterToolAddedConnection then
                _G.CharacterToolAddedConnection:Disconnect()
                _G.CharacterToolAddedConnection = nil
            end

            if _G.ToolConnections then
                for tool, connection in pairs(_G.ToolConnections) do
                    if connection then
                        connection:Disconnect()
                    end
                    if tool and tool:GetAttribute("ActivatedOverride") then
                        tool:SetAttribute("ActivatedOverride", nil)
                    end
                end
                _G.ToolConnections = nil
            end
        end
    end
)

switch:Set(false)

local targetPosition = Vector3.new(-39, 2, 22)
local teleportBackRange = 10
local isNanActive = false
local teleportLoop = nil

local function checkPositionAndTeleport()
    if not isNanActive or not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local rootPart = Player.Character.HumanoidRootPart
    local currentPosition = rootPart.Position
    local distance = (currentPosition - targetPosition).Magnitude

    if distance > teleportBackRange then
        rootPart.CFrame = CFrame.new(targetPosition)
    end
end

local nanSizeSwitch =
    KillingTab:AddSwitch(
    "NaN Size",
    function(bool)
        isNanActive = bool

        if bool then
            local args = {
                [1] = "changeSize",
                [2] = 0 / 0
            }
            changeSpeedSizeRemote:InvokeServer(unpack(args))
            teleportLoop = game:GetService("RunService").Heartbeat:Connect(checkPositionAndTeleport)
        else
            if teleportLoop then
                teleportLoop:Disconnect()
                teleportLoop = nil
            end
            local args = {
                [1] = "changeSize",
                [2] = 2
            }
            changeSpeedSizeRemote:InvokeServer(unpack(args))
        end
    end
)


KillingTab:AddLabel("Auto Kill:").TextSize = 22

_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.blacklistedPlayers = _G.blacklistedPlayers or {}

local function isWhitelisted(player)
    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == player.Name:lower() then
            return true
        end
    end
    return false
end

local function isBlacklisted(player)
    for _, name in ipairs(_G.blacklistedPlayers) do
        if name:lower() == player.Name:lower() then
            return true
        end
    end
    return false
end

local function getPlayerDisplayText(player)
    return player.DisplayName .. " | " .. player.Name
end

local whitelistDropdown =
    KillingTab:AddDropdown(
    "Add to Whitelist",
    function(selectedText)
        local playerName = selectedText:match("| (.+)$")
        if playerName then
            playerName = playerName:gsub("^%s*(.-)%s*$", "%1")
            for _, name in ipairs(_G.whitelistedPlayers) do
                if name:lower() == playerName:lower() then
                    return
                end
            end
            table.insert(_G.whitelistedPlayers, playerName)
        end
    end
)

local switch =
    KillingTab:AddSwitch(
    "Kill Everyone",
    function(bool)
        _G.killAll = bool
        if bool then
            if not _G.killAllConnection then
                _G.killAllConnection =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if _G.killAll then
                            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                                if player ~= game.Players.LocalPlayer and not isWhitelisted(player) then
                                    killPlayer(player)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.killAllConnection then
                _G.killAllConnection:Disconnect()
                _G.killAllConnection = nil
            end
        end
    end
)
switch:Set(false)

local switch =
    KillingTab:AddSwitch(
    "Whitelist Friends",
    function(bool)
        _G.whitelistFriends = bool

        if bool then
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                    local playerName = player.Name
                    local alreadyWhitelisted = false
                    for _, name in ipairs(_G.whitelistedPlayers) do
                        if name:lower() == playerName:lower() then
                            alreadyWhitelisted = true
                            break
                        end
                    end
                    if not alreadyWhitelisted then
                        table.insert(_G.whitelistedPlayers, playerName)
                    end
                end
            end

            game.Players.PlayerAdded:Connect(
                function(player)
                    if _G.whitelistFriends and player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                        local playerName = player.Name
                        local alreadyWhitelisted = false
                        for _, name in ipairs(_G.whitelistedPlayers) do
                            if name:lower() == playerName:lower() then
                                alreadyWhitelisted = true
                                break
                            end
                        end
                        if not alreadyWhitelisted then
                            table.insert(_G.whitelistedPlayers, playerName)
                        end
                    end
                end
            )
        end
    end
)

switch:Set(false)

KillingTab:AddLabel("")

local blacklistDropdown =
    KillingTab:AddDropdown(
    "Add to Killlist",
    function(selectedText)
        local playerName = selectedText:match("| (.+)$")
        if playerName then
            playerName = playerName:gsub("^%s*(.-)%s*$", "%1")
            for _, name in ipairs(_G.blacklistedPlayers) do
                if name:lower() == playerName:lower() then
                    return
                end
            end
            table.insert(_G.blacklistedPlayers, playerName)
        end
    end
)

for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        local displayText = getPlayerDisplayText(player)
        whitelistDropdown:Add(displayText)
        blacklistDropdown:Add(displayText)
    end
end

game:GetService("Players").PlayerAdded:Connect(
    function(player)
        if player ~= game.Players.LocalPlayer then
            local displayText = getPlayerDisplayText(player)
            whitelistDropdown:Add(displayText)
            blacklistDropdown:Add(displayText)
        end
    end
)

local blacklistKillSwitch =
    KillingTab:AddSwitch(
    "Kill List",
    function(bool)
        _G.killBlacklistedOnly = bool
        if bool then
            if not _G.blacklistKillConnection then
                _G.blacklistKillConnection =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if _G.killBlacklistedOnly then
                            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                                if player ~= game.Players.LocalPlayer and isBlacklisted(player) then
                                    killPlayer(player)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.blacklistKillConnection then
                _G.blacklistKillConnection:Disconnect()
                _G.blacklistKillConnection = nil
            end
        end
    end
)

local selectedPlayerToSpectate = nil
local spectating = false
local currentTargetConnection = nil
local camera = workspace.CurrentCamera

local function updateSpectateTarget(player)
    if currentTargetConnection then
        currentTargetConnection:Disconnect()
    end

    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            camera.CameraSubject = humanoid
            currentTargetConnection =
                player.CharacterAdded:Connect(
                function(newChar)
                    task.wait(0.2)
                    local newHumanoid = newChar:FindFirstChildOfClass("Humanoid")
                    if newHumanoid then
                        camera.CameraSubject = newHumanoid
                    end
                end
            )
        end
    end
end

local function updatePlayerList()
    return game.Players:GetPlayers()
end

local specdropdown =
    KillingTab:AddDropdown(
    "Choose Player",
    function(text)
        for _, player in ipairs(updatePlayerList()) do
            local optionText = player.DisplayName .. " | " .. player.Name
            if text == optionText then
                selectedPlayerToSpectate = player
                if spectating then
                    updateSpectateTarget(player)
                end
                break
            end
        end
    end
)

local spectateSwitch =
    KillingTab:AddSwitch(
    "Spectate",
    function(bool)
        spectating = bool
        if spectating and selectedPlayerToSpectate then
            updateSpectateTarget(selectedPlayerToSpectate)
        else
            if currentTargetConnection then
                currentTargetConnection:Disconnect()
                currentTargetConnection = nil
            end
            local localPlayer = game.Players.LocalPlayer
            if localPlayer.Character then
                local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    camera.CameraSubject = humanoid
                end
            end
        end
    end
)

for _, player in ipairs(updatePlayerList()) do
    specdropdown:Add(player.DisplayName .. " | " .. player.Name)
end

game.Players.PlayerAdded:Connect(
    function(player)
        specdropdown:Add(player.DisplayName .. " | " .. player.Name)
    end
)

game.Players.PlayerRemoving:Connect(
    function(player)
        if selectedPlayerToSpectate and selectedPlayerToSpectate == player then
            selectedPlayerToSpectate = nil
            if spectating then
                spectateSwitch:Set(false)
            end
        end
    end
)

KillingTab:AddLabel("Kill Aura:").TextSize = 22

local ringPart = nil
local ringColor = Color3.fromRGB(50, 163, 255)
local ringTransparency = 0.6
_G.showDeathRing = false
_G.deathRingRange = 20

local function updateRingSize()
    if not ringPart then
        return
    end
    local diameter = (_G.deathRingRange or 20) * 2
    ringPart.Size = Vector3.new(0.2, diameter, diameter)
end

KillingTab:AddTextBox(
    "Range 1-140",
    function(text)
        local range = tonumber(text)
        if range then
            _G.deathRingRange = math.clamp(range, 1, 140)
            updateRingSize()
        end
    end
)

local function toggleRingVisual()
    if _G.showDeathRing then
        ringPart = Instance.new("Part")
        ringPart.Shape = Enum.PartType.Cylinder
        ringPart.Material = Enum.Material.Neon
        ringPart.Color = ringColor
        ringPart.Transparency = ringTransparency
        ringPart.Anchored = true
        ringPart.CanCollide = false
        ringPart.CastShadow = false
        updateRingSize()
        ringPart.Parent = workspace
    elseif ringPart then
        ringPart:Destroy()
        ringPart = nil
    end
end

local function updateRingPosition()
    if not ringPart then
        return
    end
    local character = checkCharacter()
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        ringPart.CFrame = rootPart.CFrame * CFrame.Angles(0, 0, math.rad(90))
    end
end

local deathRingSwitch =
    KillingTab:AddSwitch(
    "Death Ring",
    function(bool)
        _G.deathRingEnabled = bool

        if bool then
            if not _G.deathRingConnection then
                _G.deathRingConnection =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        updateRingPosition()

                        local character = checkCharacter()
                        local myPosition =
                            character and character:FindFirstChild("HumanoidRootPart") and
                            character.HumanoidRootPart.Position
                        if not myPosition then
                            return
                        end

                        for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                            if
                                player ~= game.Players.LocalPlayer and not isWhitelisted(player) and
                                    isPlayerAlive(player)
                             then
                                local distance = (myPosition - player.Character.HumanoidRootPart.Position).Magnitude
                                if distance <= (_G.deathRingRange or 20) then
                                    killPlayer(player)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.deathRingConnection then
                _G.deathRingConnection:Disconnect()
                _G.deathRingConnection = nil
            end
        end
    end
)

local visualRingSwitch =
    KillingTab:AddSwitch(
    "Show Ring",
    function(bool)
        _G.showDeathRing = bool
        toggleRingVisual()
    end
)
deathRingSwitch:Set(false)
visualRingSwitch:Set(false)

local whitelistLabel = KillingTab:AddLabel("Whitelist: None")
whitelistLabel.TextColor3 = Color3.fromRGB(26, 122, 212)
whitelistLabel.TextSize = 17

KillingTab:AddButton(
    "Clear Whitelist",
    function()
        _G.whitelistedPlayers = {}
    end
)

local blacklistLabel = KillingTab:AddLabel("Killlist: None")
blacklistLabel.TextColor3 = Color3.fromRGB(191, 58, 25)
blacklistLabel.TextSize = 17

KillingTab:AddButton(
    "Clear Blacklist",
    function()
        _G.blacklistedPlayers = {}
    end
)

local function updateWhitelistLabel()
    if #_G.whitelistedPlayers == 0 then
        whitelistLabel.Text = "Whitelist: None"
    else
        whitelistLabel.Text = "Whitelist: " .. table.concat(_G.whitelistedPlayers, ", ")
    end
end

local function updateBlacklistLabel()
    if #_G.blacklistedPlayers == 0 then
        blacklistLabel.Text = "Killlist: None"
    else
        blacklistLabel.Text = "Killlist: " .. table.concat(_G.blacklistedPlayers, ", ")
    end
end

task.spawn(
    function()
        while true do
            updateWhitelistLabel()
            updateBlacklistLabel()
            task.wait(0.2)
        end
    end
)

FarmingTab:AddLabel("Misc").TextSize = 22

local autoLiftSwitch =
    FarmingTab:AddSwitch(
    "Auto Lift (Gamepass)",
    function(bool)
        if bool then
            local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
            local player = game:GetService("Players").LocalPlayer
            for _, gamepass in pairs(gamepassFolder:GetChildren()) do
                local value = Instance.new("IntValue")
                value.Name = gamepass.Name
                value.Value = gamepass.Value
                value.Parent = player.ownedGamepasses
            end
        else
            local player = game:GetService("Players").LocalPlayer
            if player and player.ownedGamepasses then
                local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
                for _, gamepass in pairs(gamepassFolder:GetChildren()) do
                    local ownedPass = player.ownedGamepasses:FindFirstChild(gamepass.Name)
                    if ownedPass and ownedPass.Value == gamepass.Value then
                        ownedPass:Destroy()
                    end
                end
            end
        end
    end
)

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")

local autoPunching = false
local punchLoop

local switch =
    FarmingTab:AddSwitch(
    "Auto Punch (without animation)",
    function(enabled)
        autoPunching = enabled

        if autoPunching then
            punchLoop =
                task.spawn(
                function()
                    local tool = backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")
                    if not tool then
                        repeat
                            tool = backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")
                            task.wait(0.1)
                        until tool
                    end

                    if tool.Parent == backpack then
                        tool.Parent = character
                    end

                    local hand = "leftHand"
                    while autoPunching do
                        if player:FindFirstChild("muscleEvent") then
                            player.muscleEvent:FireServer("punch", hand)
                            hand = (hand == "leftHand") and "rightHand" or "leftHand"
                        end
                        task.wait(0.2)
                    end
                end
            )
        else
            local tool = character:FindFirstChild("Punch")
            if tool then
                tool.Parent = backpack
            end
        end
    end
)
switch:Set(false)

FarmingTab:AddLabel("Tools:").TextSize = 22

local SelectedTool = nil
local AutoFarm = false

local toolDropdown =
    FarmingTab:AddDropdown(
    "Select Tool",
    function(selection)
        SelectedTool = selection
    end
)
toolDropdown:Add("Weight")
toolDropdown:Add("Pushups")
toolDropdown:Add("Situps")
toolDropdown:Add("Handstands")
toolDropdown:Add("Fast Punch")
toolDropdown:Add("Stomp")
toolDropdown:Add("Ground Slam")

local autoFarmSwitch =
    FarmingTab:AddSwitch(
    "Start",
    function(enabled)
        AutoFarm = enabled

        if enabled then
            task.spawn(
                function()
                    while AutoFarm do
                        local player = game:GetService("Players").LocalPlayer

                        if SelectedTool == "Weight" then
                            if not player.Character:FindFirstChild("Weight") then
                                local weightTool = player.Backpack:FindFirstChild("Weight")
                                if weightTool then
                                    player.Character.Humanoid:EquipTool(weightTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif SelectedTool == "Pushups" then
                            if not player.Character:FindFirstChild("Pushups") then
                                local pushupsTool = player.Backpack:FindFirstChild("Pushups")
                                if pushupsTool then
                                    player.Character.Humanoid:EquipTool(pushupsTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif SelectedTool == "Situps" then
                            if not player.Character:FindFirstChild("Situps") then
                                local situpsTool = player.Backpack:FindFirstChild("Situps")
                                if situpsTool then
                                    player.Character.Humanoid:EquipTool(situpsTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif SelectedTool == "Handstands" then
                            if not player.Character:FindFirstChild("Handstands") then
                                local handstandsTool = player.Backpack:FindFirstChild("Handstands")
                                if handstandsTool then
                                    player.Character.Humanoid:EquipTool(handstandsTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif SelectedTool == "Fast Punch" then
                            local punch = player.Backpack:FindFirstChild("Punch")
                            if punch then
                                punch.Parent = player.Character
                                if punch:FindFirstChild("attackTime") then
                                    punch.attackTime.Value = 0
                                end
                            end
                            player.muscleEvent:FireServer("punch", "rightHand")
                            player.muscleEvent:FireServer("punch", "leftHand")

                            if player.Character:FindFirstChild("Punch") then
                                player.Character.Punch:Activate()
                            end
                        elseif SelectedTool == "Stomp" then
                            local stomp = player.Backpack:FindFirstChild("Stomp")
                            if stomp then
                                stomp.Parent = player.Character
                                if stomp:FindFirstChild("attackTime") then
                                    stomp.attackTime.Value = 0
                                end
                            end
                            player.muscleEvent:FireServer("stomp")

                            if player.Character:FindFirstChild("Stomp") then
                                player.Character.Stomp:Activate()
                            end

                            if tick() % 6 < 0.1 then
                                local virtualUser = game:GetService("VirtualUser")
                                virtualUser:CaptureController()
                                virtualUser:ClickButton1(Vector2.new(500, 500))
                            end
                        elseif SelectedTool == "Ground Slam" then
                            local groundSlam = player.Backpack:FindFirstChild("Ground Slam")
                            if groundSlam then
                                groundSlam.Parent = player.Character
                                if groundSlam:FindFirstChild("attackTime") then
                                    groundSlam.attackTime.Value = 0
                                end
                            end
                            player.muscleEvent:FireServer("slam")

                            if player.Character:FindFirstChild("Ground Slam") then
                                player.Character["Ground Slam"]:Activate()
                            end

                            if tick() % 6 < 0.1 then
                                local virtualUser = game:GetService("VirtualUser")
                                virtualUser:CaptureController()
                                virtualUser:ClickButton1(Vector2.new(500, 500))
                            end
                        end

                        task.wait()
                    end
                end
            )
        else
            local player = game:GetService("Players").LocalPlayer
            if SelectedTool and player.Character:FindFirstChild(SelectedTool) then
                player.Character:FindFirstChild(SelectedTool).Parent = player.Backpack
            end
        end
    end
)

FarmingTab:AddLabel("Rocks:").TextSize = 22

local function gettool()
    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    local player = game:GetService("Players").LocalPlayer
    player.muscleEvent:FireServer("punch", "leftHand")
    player.muscleEvent:FireServer("punch", "rightHand")
end

local rockData = {
    ["Tiny Rock"] = 0,
    ["Starter Island"] = 100,
    ["Punching Rock"] = 1000,
    ["Golden Rock"] = 5000,
    ["Frost Rock"] = 150000,
    ["Mythical Rock"] = 400000,
    ["Eternal Rock"] = 750000,
    ["Legend Rock"] = 1000000,
    ["Muscle King Rock"] = 5000000,
    ["Jungle Rock"] = 10000000
}

local selectedRock = nil

local rockDropdown =
    FarmingTab:AddDropdown(
    "Select Rock",
    function(selection)
        selectedRock = selection
    end
)

for rockName in pairs(rockData) do
    rockDropdown:Add(rockName)
end

local autoRockSwitch =
    FarmingTab:AddSwitch(
    "Auto Rock",
    function(enabled)
        getgenv().RockFarmRunning = enabled

        if enabled and selectedRock then
            task.spawn(
                function()
                    local requiredDurability = rockData[selectedRock]
                    local player = game:GetService("Players").LocalPlayer

                    while getgenv().RockFarmRunning do
                        task.wait()
                        if player.Durability.Value >= requiredDurability then
                            for _, v in pairs(workspace.machinesFolder:GetDescendants()) do
                                if
                                    v.Name == "neededDurability" and v.Value == requiredDurability and
                                        player.Character:FindFirstChild("LeftHand") and
                                        player.Character:FindFirstChild("RightHand")
                                 then
                                    local rock = v.Parent:FindFirstChild("Rock")
                                    if rock then
                                        firetouchinterest(rock, player.Character.RightHand, 0)
                                        firetouchinterest(rock, player.Character.RightHand, 1)
                                        firetouchinterest(rock, player.Character.LeftHand, 0)
                                        firetouchinterest(rock, player.Character.LeftHand, 1)
                                        gettool()
                                    end
                                end
                            end
                        end
                    end
                end
            )
        end
    end
)

FarmingTab:AddLabel("Machines:").TextSize = 22

local selectedLocation = nil
local selectedWorkout = nil
local working = false
local workoutTypeDropdown
local machineDropdown
local repTask = nil

local function pressE()
    local vim = game:GetService("VirtualInputManager")
    vim:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    vim:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while working and task.wait() do
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
    end
end

local function stopAutoLift()
    if repTask then
        repTask:Cancel()
        repTask = nil
    end
end

local function teleportAndStart(machineName, position)
    local char = game.Players.LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        char.HumanoidRootPart.CFrame = position
        task.wait(0.5)
        pressE()
        if working then
            repTask = task.spawn(autoLift)
        end
    end
end

local workoutPositions = {
    ["Bench Press"] = {
        ["Jungle Gym"] = CFrame.new(-8173, 64, 1898),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217)
    },
    ["Squat"] = {
        ["Jungle Gym"] = CFrame.new(-8352, 34, 2878),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334)
    },
    ["Pull Up"] = {
        ["Jungle Gym"] = CFrame.new(-8666, 34, 2070),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334)
    },
    ["Boulder"] = {
        ["Jungle Gym"] = CFrame.new(-8621, 34, 2684),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334)
    }
}

local workoutLocations = {
    "Jungle Gym",
    "Muscle King Gym",
    "Legend Gym"
}

FarmingTab:AddSwitch(
    "Start",
    function(enabled)
        working = enabled

        if enabled then
            if selectedLocation and selectedWorkout and workoutPositions[selectedWorkout][selectedLocation] then
                teleportAndStart(selectedWorkout, workoutPositions[selectedWorkout][selectedLocation])
            end
        else
            stopAutoLift()
        end
    end
)

local locationDropdown =
    FarmingTab:AddDropdown(
    "Gym",
    function(location)
        selectedLocation = location

        if machineDropdown then
            machineDropdown:Clear()
        end

        if location == "Jungle Gym" then
            machineDropdown =
                FarmingTab:AddDropdown(
                "Machine",
                function(machine)
                    selectedWorkout = machine
                end
            )
            machineDropdown:Add("Bench Press")
            machineDropdown:Add("Squat")
            machineDropdown:Add("Pull Up")
            machineDropdown:Add("Boulder")
        elseif location == "Muscle King Gym" then
            machineDropdown =
                FarmingTab:AddDropdown(
                "Machine",
                function(machine)
                    selectedWorkout = machine
                end
            )
            machineDropdown:Add("Bench Press")
            machineDropdown:Add("Squat")
            machineDropdown:Add("Pull Up")
            machineDropdown:Add("Boulder")
        elseif location == "Legend Gym" then
            machineDropdown =
                FarmingTab:AddDropdown(
                "Machine",
                function(machine)
                    selectedWorkout = machine
                end
            )
            machineDropdown:Add("Bench Press")
            machineDropdown:Add("Squat")
            machineDropdown:Add("Pull Up")
            machineDropdown:Add("Boulder")
        end
    end
)

for _, location in ipairs(workoutLocations) do
    locationDropdown:Add(location)
end

InventoryTab:AddLabel("Egg Gifter:").TextSize = 22

local proteinEggLabel = InventoryTab:AddLabel("Protein Eggs: 0")
proteinEggLabel.TextSize = 20

local selectedPlayer = nil
local eggCount = 0

local playerDropdown =
    InventoryTab:AddDropdown(
    "Choose Player",
    function(name)
        selectedPlayer = Players:FindFirstChild(name)
    end
)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        playerDropdown:Add(player.Name)
    end
end

Players.PlayerAdded:Connect(
    function(player)
        if player ~= Players.LocalPlayer then
            playerDropdown:Add(player.Name)
        end
    end
)

InventoryTab:AddTextBox(
    "Amount",
    function(Text)
        eggCount = tonumber(Text)
    end
)

InventoryTab:AddButton(
    "Start Gifting",
    function()
        if selectedPlayer and eggCount and eggCount > 0 then
            for i = 1, eggCount do
                local args = {
                    [1] = "giftRequest",
                    [2] = selectedPlayer,
                    [3] = Players.LocalPlayer.consumablesFolder:FindFirstChild("Protein Egg")
                }

                ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
            end
        end
    end
)

InventoryTab:AddLabel("Shake Gifter:").TextSize = 22

local tropicalShakeLabel = InventoryTab:AddLabel("Tropical Shakes: 0")
tropicalShakeLabel.TextSize = 18

local function updateItemCount()
    local proteinEggCount = 0
    local tropicalShakeCount = 0

    local backpack = Players.LocalPlayer:WaitForChild("Backpack")
    if backpack then
        for _, item in ipairs(backpack:GetChildren()) do
            if item.Name == "Protein Egg" then
                proteinEggCount = proteinEggCount + 1
            elseif item.Name == "Tropical Shake" then
                tropicalShakeCount = tropicalShakeCount + 1
            end
        end
    end

    proteinEggLabel.Text = "Protein Eggs: " .. proteinEggCount
    tropicalShakeLabel.Text = "Tropical Shakes: " .. tropicalShakeCount
end

task.spawn(
    function()
        while true do
            updateItemCount()
            task.wait(0.25)
        end
    end
)

local selectedPlayer = nil
local shakeCount = 0

local playerDropdown =
    InventoryTab:AddDropdown(
    "Choose Player",
    function(name)
        selectedPlayer = Players:FindFirstChild(name)
    end
)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        playerDropdown:Add(player.Name)
    end
end

Players.PlayerAdded:Connect(
    function(player)
        if player ~= Players.LocalPlayer then
            playerDropdown:Add(player.Name)
        end
    end
)

InventoryTab:AddTextBox(
    "Amount",
    function(Text)
        shakeCount = tonumber(Text)
    end
)

InventoryTab:AddButton(
    "Start Gifting",
    function()
        if selectedPlayer and shakeCount and shakeCount > 0 then
            for i = 1, shakeCount do
                local args = {
                    [1] = "giftRequest",
                    [2] = selectedPlayer,
                    [3] = Players.LocalPlayer.consumablesFolder:FindFirstChild("Tropical Shake")
                }

                ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
            end
        end
    end
)

InventoryTab:AddLabel("Eater:").TextSize = 22

local function activateProteinEgg()
    local tool = player.Character:FindFirstChild("Protein Egg") or player.Backpack:FindFirstChild("Protein Egg")
    if tool then
        muscleEvent:FireServer("proteinEgg", tool)
    end
end

local running = false

task.spawn(
    function()
        while true do
            if running then
                activateProteinEgg()
                task.wait(0.25)
            else
                task.wait(1)
            end
        end
    end
)

local switch =
    InventoryTab:AddSwitch(
    "Egg Devour",
    function(state)
        running = state
        if state then
            activateProteinEgg()
        end
    end
)
switch:Set(false)

local itemList = {
    "Tropical Shake",
    "Energy Shake",
    "Protein Bar",
    "TOUGH Bar",
    "Protein Shake",
    "ULTRA Shake",
    "Energy Bar"
}

local function formatEventName(itemName)
    local parts = {}
    for word in itemName:gmatch("%S+") do
        table.insert(parts, word:lower())
    end
    for i = 2, #parts do
        parts[i] = parts[i]:sub(1, 1):upper() .. parts[i]:sub(2)
    end
    return table.concat(parts)
end

local function activateRandomItems(count)
    local shuffledItems = {}
    for _, item in ipairs(itemList) do
        table.insert(shuffledItems, item)
    end
    for i = #shuffledItems, 2, -1 do
        local j = math.random(i)
        shuffledItems[i], shuffledItems[j] = shuffledItems[j], shuffledItems[i]
    end
    for i = 1, math.min(count, #shuffledItems) do
        local tool =
            player.Character:FindFirstChild(shuffledItems[i]) or player.Backpack:FindFirstChild(shuffledItems[i])
        if tool then
            local eventName = formatEventName(shuffledItems[i])
            muscleEvent:FireServer(eventName, tool)
        end
    end
end

local running = false

task.spawn(
    function()
        while true do
            if running then
                activateRandomItems(4)
                task.wait(0.5)
            else
                task.wait(0.5)
            end
        end
    end
)

local switch =
    InventoryTab:AddSwitch(
    "Eat Everything",
    function(state)
        running = state
        if state then
            activateRandomItems(4)
        end
    end
)
switch:Set(false)

TeleportTab:AddLabel("Main:").TextSize = 22

TeleportTab:AddButton(
    "Tiny Island",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-37.1, 9.2, 1919)
    end
)

TeleportTab:AddButton(
    "Main Island",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(16.07, 9.08, 133.8)
    end
)

TeleportTab:AddButton(
    "Beach",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-8, 9, -169.2)
    end
)

TeleportTab:AddButton(
    "Lava Brawl",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(4466.08, 103.55, -8446.83)
    end
)


TeleportTab:AddLabel("Gyms:").TextSize = 22

TeleportTab:AddButton(
    "Muscle King Gym",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-8665.4, 17.21, -5792.9)
    end
)

TeleportTab:AddButton(
    "Jungle Gym",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-8543, 6.8, 2400)
    end
)

TeleportTab:AddButton(
    "Legends Gym",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(4516, 991.5, -3856)
    end
)

TeleportTab:AddButton(
    "Infernal Gym",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-6759, 7.36, -1284)
    end
)

TeleportTab:AddButton(
    "Mythical Gym",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(2250, 7.37, 1073.2)
    end
)

TeleportTab:AddButton(
    "Frost Gym",
    function()
        local char = player.Character or Player.CharacterAdded()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-2623, 7.36, -409)
    end
)

PetsTab:AddLabel("Pets:").TextSize = 22

local selectedPet = "Darkstar Hunter "
local petDropdown =
    PetsTab:AddDropdown(
    "Choose Pet",
    function(text)
        selectedPet = text
    end
)

petDropdown:Add("Darkstar Hunter")
petDropdown:Add("Neon Guardian")
petDropdown:Add("Blue Birdie")
petDropdown:Add("Blue Bunny")
petDropdown:Add("Blue Firecaster")
petDropdown:Add("Blue Pheonix")
petDropdown:Add("Crimson Falcon")
petDropdown:Add("Cybernetic Showdown Dragon")
petDropdown:Add("Dark Golem")
petDropdown:Add("Dark Legends Manticore")
petDropdown:Add("Dark Vampy")
petDropdown:Add("Eternal Strike Leviathan")
petDropdown:Add("Frostwave Legends Penguin")
petDropdown:Add("Gold Warrior")
petDropdown:Add("Golden Pheonix")
petDropdown:Add("Golden Viking")
petDropdown:Add("Green Butterfly")
petDropdown:Add("Green Firecaster")
petDropdown:Add("Infernal Dragon")
petDropdown:Add("Lightning Strike Phantom")
petDropdown:Add("Magic Butterfly")
petDropdown:Add("Muscle Sensei")
petDropdown:Add("Orange Hedgehog")
petDropdown:Add("Orange Pegasus")
petDropdown:Add("Phantom Genesis Dragon")
petDropdown:Add("Purple Dragon")
petDropdown:Add("Purple Falcon")
petDropdown:Add("Red Dragon")
petDropdown:Add("Red Firecaster")
petDropdown:Add("Red Kitty")
petDropdown:Add("Silver Dog")
petDropdown:Add("Ultimate Supernova Pegasus")
petDropdown:Add("Ultra Birdie")
petDropdown:Add("White Pegasus")
petDropdown:Add("White Pheonix")
petDropdown:Add("Yellow Butterfly")

PetsTab:AddSwitch(
    "Buy Pet",
    function(bool)
        _G.AutoHatchPet = bool

        if bool then
            spawn(
                function()
                    while _G.AutoHatchPet and selectedPet ~= "" do
                        local petToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedPet)
                        if petToOpen then
                            ReplicatedStorage.cPetShopRemote:InvokeServer(petToOpen)
                        end
                        task.wait(0.1)
                    end
                end
            )
        end
    end
)

PetsTab:AddLabel("Auras:").TextSize = 22

local selectedAura = "Entropic Blast"
local auraDropdown =
    PetsTab:AddDropdown(
    "Select Aura",
    function(text)
        selectedAura = text
    end
)

auraDropdown:Add("Entropic Blast")
auraDropdown:Add("Muscle King")
auraDropdown:Add("Astral Electro")
auraDropdown:Add("Azure Tundra")
auraDropdown:Add("Blue Aura")
auraDropdown:Add("Dark Electro")
auraDropdown:Add("Dark Lightning")
auraDropdown:Add("Dark Storm")
auraDropdown:Add("Electro")
auraDropdown:Add("Enchanted Mirage")
auraDropdown:Add("Eternal Megastrike")
auraDropdown:Add("Grand Supernova")
auraDropdown:Add("Green Aura")
auraDropdown:Add("Inferno")
auraDropdown:Add("Lightning")
auraDropdown:Add("Power Lightning")
auraDropdown:Add("Purple Aura")
auraDropdown:Add("Purple Nova")
auraDropdown:Add("Red Aura")
auraDropdown:Add("Supernova")
auraDropdown:Add("Ultra Inferno")
auraDropdown:Add("Ultra Mirage")
auraDropdown:Add("Unstable Mirage")
auraDropdown:Add("Yellow Aura")

PetsTab:AddSwitch(
    "Buy Aura",
    function(bool)
        _G.AutoHatchAura = bool

        if bool then
            spawn(
                function()
                    while _G.AutoHatchAura and selectedAura ~= "" do
                        local auraToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedAura)
                        if auraToOpen then
                            ReplicatedStorage.cPetShopRemote:InvokeServer(auraToOpen)
                        end
                        task.wait(0.1)
                    end
                end
            )
        end
    end
)

StatsTab:AddLabel(emojiMap["Time"] .. " Time:").TextSize = 22

local stopwatchLabel = StatsTab:AddLabel("0d 0h 0m 0s")
stopwatchLabel.TextSize = 20
StatsTab:AddLabel("")

StatsTab:AddLabel(emojiMap["Stats"] .. " Stats:").TextSize = 22

local startTime = tick()

task.spawn(
    function()
        while true do
            local currentTime = tick()
            local elapsedTime = currentTime - startTime

            local days = math.floor(elapsedTime / (24 * 3600))
            local hours = math.floor((elapsedTime % (24 * 3600)) / 3600)
            local minutes = math.floor((elapsedTime % 3600) / 60)
            local seconds = math.floor(elapsedTime % 60)

            stopwatchLabel.Text = string.format("%dd %dh %dm %ds", days, hours, minutes, seconds)

            task.wait(0.1)
        end
    end
)

local leaderstats = player:WaitForChild("leaderstats")
local strengthStat = leaderstats:WaitForChild("Strength")
local rebirthsStat = leaderstats:WaitForChild("Rebirths")
local durabilityStat = player:WaitForChild("Durability")
local killsStat = leaderstats:WaitForChild("Kills")
local agilityStat = player:WaitForChild("Agility")
local evilKarmaStat = player:WaitForChild("evilKarma")
local goodKarmaStat = player:WaitForChild("goodKarma")
local brawlsStat = leaderstats:WaitForChild("Brawls")

local stats = {
    {name = emojiMap["Strength"] .. " Strength", stat = strengthStat},
    {name = emojiMap["Rebirths"] .. " Rebirths", stat = rebirthsStat},
    {name = emojiMap["Durability"] .. " Durability", stat = durabilityStat},
    {name = emojiMap["Kills"] .. " Kills", stat = killsStat},
    {name = emojiMap["Agility"] .. " Agility", stat = agilityStat},
    {name = emojiMap["Evil Karma"] .. " Evil Karma", stat = evilKarmaStat},
    {name = emojiMap["Good Karma"] .. " Good Karma", stat = goodKarmaStat},
    {name = emojiMap["Brawls"] .. " Brawls", stat = brawlsStat}
}

local initialValues = {}
local statLabels = {}

local function formatNumber(n)
    if n >= 1e15 then
        return string.format("%.1fqa", n / 1e15)
    elseif n >= 1e12 then
        return string.format("%.1ft", n / 1e12)
    elseif n >= 1e9 then
        return string.format("%.1fb", n / 1e9)
    elseif n >= 1e6 then
        return string.format("%.1fm", n / 1e6)
    elseif n >= 1e3 then
        return string.format("%.1fk", n / 1e3)
    else
        return tostring(n)
    end
end

local function formatWithCommas(n)
    local formatted = tostring(n)
    while true do
        formatted, k = formatted:gsub("^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then
            break
        end
    end
    return formatted
end

for _, info in ipairs(stats) do
    initialValues[info.name] = info.stat.Value
    statLabels[info.name] = StatsTab:AddLabel("")
    statLabels[info.name].TextSize = 20
end

while true do
    for _, info in ipairs(stats) do
        local currentValue = info.stat.Value
        local gained = currentValue - initialValues[info.name]

        local displayText =
            string.format(
            "%s: %s (%s) | Gained: %s (%s)",
            info.name,
            formatNumber(currentValue),
            formatWithCommas(currentValue),
            formatNumber(gained),
            formatWithCommas(gained)
        )

        statLabels[info.name].Text = displayText
    end
    wait(0.1)
end


library:Init()
